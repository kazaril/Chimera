-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\lab2\lab2.vhd
-- Created: 2015-08-19 00:49:37
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2
-- Target subsystem base rate: 2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: lab2
-- Source Path: lab2
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.lab2_pkg.ALL;

ENTITY BIQUAD_auto IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        S                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        a0                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        a1                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        a2                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        b1                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        b2                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END BIQUAD_auto;


architecture rtl of BIQUAD_auto is

signal Sa0 : std_logic_vector;

begin

process(clk) begin
if(clk'event and clk='1')then



end if;
end process;

--ARCHITECTURE rtl OF BIQUAD_auto  IS
 
--  -- Constants
--  CONSTANT C_divbyzero_p                  : signed(17 DOWNTO 0) := to_signed(2#011111111111111111#, 18);  -- sfix18
--  CONSTANT C_divbyzero_n                  : signed(17 DOWNTO 0) := to_signed(2#100000000000000000#, 18);  -- sfix18

--  -- Signals
--  SIGNAL enb                              : std_logic;
--  SIGNAL S_signed                         : signed(15 DOWNTO 0);  -- int16
--  SIGNAL a0_signed                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
--  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- int32
--  SIGNAL a1_signed                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- int32
--  SIGNAL a2_signed                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- int32
--  SIGNAL b2_signed                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL b1_signed                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product5_out1                    : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- int32
--  SIGNAL Delay3_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
--  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- int32
--  SIGNAL Add2_sub_cast                    : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add2_sub_cast_1                  : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add2_out1                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Add1_stage2_add_cast             : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add1_op_stage2                   : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add1_stage3_sub_cast             : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Add_add_cast                     : signed(15 DOWNTO 0);  -- sfix16
--  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- int16
--  SIGNAL Add_out1_dtc                     : signed(16 DOWNTO 0);  -- sfix17
--  SIGNAL Product5_div_temp                : signed(17 DOWNTO 0);  -- sfix18
--  SIGNAL Product5_slice_cast              : signed(17 DOWNTO 0);  -- sfix18

--BEGIN
--  S_signed <= signed(S);

--  a0_signed <= signed(a0);

--  enb <= clk_enable;

--  Delay_process : PROCESS (clk, reset)
--  BEGIN
--    IF reset = '1' THEN
--      Delay_out1 <= to_signed(16#0000#, 16);
--    ELSIF clk'EVENT AND clk = '1' THEN
--      IF enb = '1' THEN
--        Delay_out1 <= S_signed;
--      END IF;
--    END IF;
--  END PROCESS Delay_process;

--  Delay1_process : PROCESS (clk, reset)
--  BEGIN
--    IF reset = '1' THEN
--      Delay1_reg <= (OTHERS => to_signed(16#0000#, 16));
--    ELSIF clk'EVENT AND clk = '1' THEN
--      IF enb = '1' THEN
--        Delay1_reg(0) <= S_signed;
--        Delay1_reg(1) <= Delay1_reg(0);
--      END IF;
--    END IF;
--  END PROCESS Delay1_process;
--  Delay1_out1 <= Delay1_reg(1);

--  Product_out1 <= S_signed * a0_signed;

--  a1_signed <= signed(a1);

--  Product1_out1 <= Delay_out1 * a1_signed;

--  a2_signed <= signed(a2);

--  Product2_out1 <= Delay1_out1 * a2_signed;

--  b2_signed <= signed(b2);

--  b1_signed <= signed(b1);

--  Constant_out1 <= to_signed(16#0400#, 16);

--  Delay2_process : PROCESS (clk, reset)
--  BEGIN
--    IF reset = '1' THEN
--      Delay2_out1 <= to_signed(16#0000#, 16);
--    ELSIF clk'EVENT AND clk = '1' THEN
--      IF enb = '1' THEN
--        Delay2_out1 <= Product5_out1;
--      END IF;
--    END IF;
--  END PROCESS Delay2_process;

--  Product3_out1 <= b1_signed * Delay2_out1;

--  Delay3_process : PROCESS (clk, reset)
--  BEGIN
--    IF reset = '1' THEN
--      Delay3_reg <= (OTHERS => to_signed(16#0000#, 16));
--    ELSIF clk'EVENT AND clk = '1' THEN
--      IF enb = '1' THEN
--        Delay3_reg(0) <= Product5_out1;
--        Delay3_reg(1) <= Delay3_reg(0);
--      END IF;
--    END IF;
--  END PROCESS Delay3_process;
--  Delay3_out1 <= Delay3_reg(1);

--  Product4_out1 <= Delay3_out1 * b2_signed;

--  Add2_sub_cast <= Product2_out1(15 DOWNTO 0);
--  Add2_sub_cast_1 <= Product4_out1(15 DOWNTO 0);
--  Add2_out1 <= Add2_sub_cast - Add2_sub_cast_1;

--  Add1_stage2_add_cast <= Product1_out1(15 DOWNTO 0);
--  Add1_op_stage2 <= Add1_stage2_add_cast + Add2_out1;

--  Add1_stage3_sub_cast <= Product3_out1(15 DOWNTO 0);
--  Add1_out1 <= Add1_op_stage2 - Add1_stage3_sub_cast;

--  Add_add_cast <= Product_out1(15 DOWNTO 0);
--  Add_out1 <= Add_add_cast + Add1_out1;

--  Add_out1_dtc <= resize(Add_out1, 17);

--  Product5_slice_cast <= resize(Add_out1_dtc, 18);
  
--  Product5_div_temp <= C_divbyzero_p WHEN (Constant_out1 = 0) AND (Product5_slice_cast(17) = Constant_out1(15)) ELSE
--      C_divbyzero_n WHEN Constant_out1 = 0 ELSE
--      resize(Add_out1_dtc, 18) / Constant_out1;
  
--  Product5_out1 <= X"7FFF" WHEN (Product5_div_temp(17) = '0') AND (Product5_div_temp(16 DOWNTO 15) /= "00") ELSE
--      X"8000" WHEN (Product5_div_temp(17) = '1') AND (Product5_div_temp(16 DOWNTO 15) /= "11") ELSE
--      Product5_div_temp(15 DOWNTO 0);

--  Out1 <= std_logic_vector(Product5_out1);

--  ce_out <= clk_enable;

END rtl;

